C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE DEMO
OBJECT MODULE PLACED IN demo.OBJ
COMPILER INVOKED BY: F:\Keil\C51\BIN\C51.EXE demo.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "STC15F2K60S2.H" //头文件
   2          #include "intrins.H"      //头文件
   3          #include "ctype.h"
   4          //宏定义
   5          #define uchar unsigned char
   6          #define uint unsigned int
   7          #define ulint unsigned long int
   8          
   9          //DS1302寄存器的定义
  10          #define DS1302_second_write 0X80
  11          #define DS1302_minutes_write 0X82
  12          #define DS1302_hour_write 0X84
  13          #define DS1302_date_write 0X86
  14          #define DS1302_week_write 0X8A
  15          #define DS1302_month_write 0X88
  16          #define DS1302_year_write 0X8C
  17          
  18          #define DS1302_second_read 0X81
  19          #define DS1302_minutes_read 0X83
  20          #define DS1302_hour_read 0X85
  21          #define DS1302_date_read 0X87
  22          #define DS1302_week_read 0X8B
  23          #define DS1302_month_read 0X89
  24          #define DS1302_year_read 0X8D
  25          
  26          //位定义
  27          sbit SEL0 = P2 ^ 0;
  28          sbit SEL1 = P2 ^ 1;
  29          sbit SEL2 = P2 ^ 2;
  30          sbit RTC_sclk = P1 ^ 5; //时钟控制引脚，控制数据的输入输出
  31          sbit RTC_rst = P1 ^ 6;  //CE引脚，读写时必须置高电平
  32          sbit RTC_io = P5 ^ 4;   //数据引脚
  33          sbit sbtKey1 = P3 ^ 2;  // 按键K1
  34          sbit sbtKey2 = P3 ^ 3;  // 按键K2
  35          sbit sbtVib = P2 ^ 4;   //振动传感器
  36          //显示的位定义
  37          sbit led_sel = P2 ^ 3;
  38          uchar wei[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};                                                                                                  //数码管位选
  39          uchar duan[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 
             -0x71}; //显示0-f
  40          
  41          uint show_flag = 1; // 是否显示数码管
  42          uint light_dig = 1;
  43          uint sbtKey1_state = 1;                                                                           // K1消抖
  44          uint sbtKey2_state = 1;                                                                           // K2消抖
  45          uint Led_Value = 8;                                                                                       // 数码管显示位数 8 ~ 44 4位一档 共9档
  46          uint Light_Level[] = {10, 20, 30, 40, 60, 80, 120, 160, 200}; // 不同光照强度阙值
  47          // 光照测试部分变量
  48          uint l = 0;             //执行光的次数
  49          uint time_ = 0; //延时
  50          ulint suml = 0; //光AD值得总和
  51          uint light = 0; //光
  52          uint light_choice = 0;
  53          uint light_bai = 0;
  54          uint light_shi = 0;
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 2   

  55          uint light_ge = 0;
  56          // 双击亮屏
  57          uint tiptap = 0;
  58          uint Vib_flap = 0;
  59          uint ret = 0;
  60          //定义时间结构体
  61          typedef struct _systemtime_
  62          {
  63                  uchar second;
  64                  uchar minute;
  65                  uchar hour;
  66                  uchar day;
  67                  uchar week;
  68                  uchar month;
  69                  uchar year;
  70          } systemtime;
  71          
  72          systemtime t;
  73          uchar i;
  74          uchar temp;
  75          int sec = 0;
  76          char flag_100mS = 0;
  77          
  78          //DS1302写一个字节的数据
  79          void DS1302WriteByte(uchar dat)
  80          {
  81   1              uchar i;
  82   1              RTC_sclk = 0; //初始时钟线置0
  83   1              _nop_();
  84   1              _nop_();
  85   1              for (i = 0; i < 8; i++) //开始传输8位数据
  86   1              {
  87   2                      RTC_io = dat & 0x01; //取最低位
  88   2                      _nop_();
  89   2                      _nop_();
  90   2                      RTC_sclk = 1; //时钟线拉高，制造上升沿，数据被传输
  91   2                      _nop_();
  92   2                      _nop_();
  93   2                      RTC_sclk = 0; //时钟线拉低，为下一个上升沿做准备
  94   2                      dat >>= 1;        //数据右移一位，准备传输下一位数据
  95   2              }
  96   1      }
  97          
  98          ////DS1302读一个字节的数据
  99          uchar DS1302ReadByte()
 100          {
 101   1              uchar i, dat;
 102   1              _nop_();
 103   1              _nop_();
 104   1              for (i = 0; i < 8; i++)
 105   1              {
 106   2                      dat >>= 1;               //要返回的数据右移一位
 107   2                      if (RTC_io == 1) //当数据线为高时，证明该位数据为1
 108   2                              dat |= 0x80;
 109   2                      RTC_sclk = 1;
 110   2                      _nop_();
 111   2                      _nop_();
 112   2                      RTC_sclk = 0; //制造下降沿
 113   2                      _nop_();
 114   2                      _nop_();
 115   2              }
 116   1              return dat; //返回读取出的数据
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 3   

 117   1      }
 118          
 119          //读相应地址中写一个字节的数据
 120          uchar DS1302Read(uchar cmd)
 121          {
 122   1              uchar dat;
 123   1              RTC_rst = 0;                    //初始CE置0
 124   1              RTC_sclk = 0;                   //初始时钟置0
 125   1              RTC_rst = 1;                    //初始CE置1，传输开始
 126   1              DS1302WriteByte(cmd);   //传输命令字，
 127   1              dat = DS1302ReadByte(); //读取得到的时间
 128   1              RTC_sclk = 1;                   //时钟线拉高
 129   1              RTC_rst = 0;                    //读取结束，CE置0，结束数据传输
 130   1              return dat;                             //返回得到的时间日期
 131   1      }
 132          
 133          //在相应地址中写数据
 134          void DS1302Write(uchar cmd, uchar dat)
 135          {
 136   1              RTC_rst = 0;              //初始CE置0
 137   1              RTC_sclk = 0;             //初始时钟置0
 138   1              RTC_rst = 1;              //置1，传输开始
 139   1              DS1302WriteByte(cmd); //传输命令字，要写入的时间的地址
 140   1              DS1302WriteByte(dat); //写入修改的时间
 141   1              RTC_sclk = 1;             //时钟线拉高
 142   1              RTC_rst = 0;              //读取结束，CE=0，结束数据的传输
 143   1      }
 144          //DS1302的时间值获取程序
 145          systemtime GetDA1302()
 146          {
 147   1              systemtime time;
 148   1              uchar realvalue;
 149   1              realvalue = DS1302Read(DS1302_second_read);
 150   1              time.second = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 151   1              realvalue = DS1302Read(DS1302_minutes_read);
 152   1              time.minute = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 153   1              realvalue = DS1302Read(DS1302_hour_read);
 154   1              time.hour = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 155   1              realvalue = DS1302Read(DS1302_date_read);
 156   1              time.day = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 157   1              realvalue = DS1302Read(DS1302_week_read);
 158   1              time.week = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 159   1              realvalue = DS1302Read(DS1302_month_read);
 160   1              time.month = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 161   1              realvalue = DS1302Read(DS1302_year_read);
 162   1              time.year = ((realvalue & 0x70) >> 4) * 10 + (realvalue & 0x0f);
 163   1              return time;
 164   1      }
 165          //DS1302初始化程序
 166          void Init_DS1302()
 167          {
 168   1              unsigned char hour, min, sec;
 169   1              unsigned char code DataStr[] = __TIME__; //格式："09:12:04"       9字符（含结束符）
 170   1      
 171   1              hour = ((toint(DataStr[0])) << 4) + toint(DataStr[1]);
 172   1              min = ((toint(DataStr[3])) << 4) + toint(DataStr[4]);
 173   1              sec = ((toint(DataStr[6])) << 4) + toint(DataStr[7]);
 174   1      
 175   1              DS1302Write(0X8E, 0X00); //写保护关
 176   1              DS1302Write(DS1302_second_write, sec);
 177   1              DS1302Write(DS1302_minutes_write, min);
 178   1              DS1302Write(DS1302_hour_write, hour);
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 4   

 179   1              temp = DS1302Read(DS1302_second_read) & 0x7f;
 180   1              DS1302Write(DS1302_second_write, temp);
 181   1              DS1302Write(0X8E, 0X80); //写保护置1
 182   1      }
 183          
 184          void set_charge_DS1302()
 185          {
 186   1              DS1302Write(0X8E, 0X00); //写保护关
 187   1              DS1302Write(0x90, 0xa9); //  充电设置：允许充电，2个二极管，2K电
 188   1              DS1302Write(0X8E, 0X80); //写保护置1
 189   1      }
 190          void Delay20us()                //@11.0592MHz
 191          {
 192   1              unsigned char i;
 193   1      
 194   1              _nop_();
 195   1              _nop_();
 196   1              _nop_();
 197   1              i = 52;
 198   1              while (--i);
 199   1      }
 200          void Delay10ms() //@11.0592MHz
 201          {
 202   1              unsigned char i, j;
 203   1      
 204   1              i = 108;
 205   1              j = 145;
 206   1              do
 207   1              {
 208   2                      while (--j)
 209   2                              ;
 210   2              } while (--i);
 211   1      }
 212          
 213          //系统初始化程序
 214          void init()
 215          {
 216   1              P3 = 0xEF; //关蜂鸣器
 217   1              P2M0 = 0XFF;
 218   1              P2M1 = 0X00;
 219   1              P0M0 = 0XFF;
 220   1              P0M1 = 0X00;
 221   1      
 222   1              led_sel = 0; //选通数码管
 223   1              TMOD = 0X11; //定时器0，工作方式1
 224   1              EA = 1;          //打开总中断
 225   1              EADC = 1;
 226   1              TH0 = (65535 - 40000) / 256; //设置定时初值
 227   1              TL0 = (65535 - 40000) % 256;
 228   1              TR0 = 1; //启动定时器
 229   1      
 230   1              TH1 = (65535 - 50000) / 256;
 231   1              TL1 = (65535 - 50000) % 256;
 232   1              TR1 = 1;
 233   1              ET0 = 1; //开启定时器中断
 234   1              ET1 = 1;
 235   1      }
 236          void InitADC_light() //初始化光ADC
 237          {
 238   1              ADC_RES = 0;
 239   1              ADC_RESL = 0;
 240   1              ADC_CONTR = 0x8c; //CHS=100选择P1^4作为A/D输入使用
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 5   

 241   1              CLK_DIV = 0x20;
 242   1      }
 243          void date_processlight()
 244          {
 245   1              light_bai = light % 1000 / 100;
 246   1              light_shi = light % 100 / 10;
 247   1              light_ge = light % 10;
 248   1      }
 249          void time0() interrupt 1
 250          {
 251   1              TH0 = (65535 - 40000) / 256; //设置定时初值
 252   1              TL0 = (65535 - 40000) % 256;
 253   1              EA = 0;
 254   1              InitADC_light(); //初始化光
 255   1              EA = 1;
 256   1      }
 257          void time1() interrupt 3
 258          {
 259   1              TH1 = (65535 - 50000) / 256;
 260   1              TL1 = (65535 - 50000) % 256;
 261   1              EA = 0;
 262   1              if (light >= Light_Level[light_choice] && light < Light_Level[light_choice])
 263   1                      light_choice = light_choice;
 264   1              else if (light < Light_Level[light_choice])
 265   1              {
 266   2                      light_choice -= 1;
 267   2                      if (light_choice <= 0)
 268   2                              light_choice = 0;
 269   2                      Led_Value += 4;
 270   2                      if (Led_Value > 44)
 271   2                              Led_Value = 44;
 272   2              }
 273   1              else
 274   1              {
 275   2                      light_choice += 1;
 276   2                      if (light_choice >= 8)
 277   2                              light_choice = 8;
 278   2                      Led_Value -= 4;
 279   2                      if (Led_Value < 8)
 280   2                              Led_Value = 8;
 281   2              }
 282   1              EA = 1;
 283   1      }
 284          // AD中断
 285          void adc_isr() interrupt 5 using 1
 286          {
 287   1              time_++;
 288   1              EA = 0; //关闭中断
 289   1      
 290   1              if (time_ > 2000) //取多次值求平均值减小误差
 291   1              {
 292   2                      light = (suml + l / 2) / l; //四舍五入
 293   2                      suml = 0;
 294   2                      l = 0;
 295   2                      time_ = 0;
 296   2                      date_processlight();
 297   2              }
 298   1              //处理光部分的数据
 299   1              l++;
 300   1              suml += ADC_RES * 256 + ADC_RESL; //求l次AD值的和
 301   1      
 302   1              ADC_CONTR &= ~0X10; //转换完成后，ADC_FLAG清零
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 6   

 303   1              ADC_CONTR |= 0X08;      //转换完成后，ADC_START赋1
 304   1              EA = 1;                         //打开中断
 305   1      }
 306          void show_shumaguan()
 307          {
 308   1              i++;
 309   1              if (++sec == 100)
 310   1              {
 311   2                      sec = 0;
 312   2                      flag_100mS = 1;
 313   2              }
 314   1              if (i == Led_Value)
 315   1                      i = 0;
 316   1              led_sel = 0;
 317   1              P0 = 0X00;
 318   1              if (show_flag == 1 && i < 8 && light_dig == 1)
 319   1              {
 320   2                      P2 = wei[i];
 321   2                      switch (i)
 322   2                      {
 323   3                      case 0:
 324   3                              P0 = duan[t.hour / 10];
 325   3                              break;
 326   3                      case 1:
 327   3                              P0 = duan[t.hour % 10];
 328   3                              break;
 329   3                      case 3:
 330   3                              P0 = duan[t.minute / 10];
 331   3                              break;
 332   3                      case 4:
 333   3                              P0 = duan[t.minute % 10];
 334   3                              break;
 335   3                      case 6:
 336   3                              P0 = duan[t.second / 10];
 337   3                              break;
 338   3                      case 7:
 339   3                              P0 = duan[t.second % 10];
 340   3                              break;
 341   3                      default:
 342   3                              P0 = 0x40;
 343   3                              break;
 344   3                      }
 345   2              }
 346   1              else if (show_flag == 0 && tiptap == 1 && light_dig == 1 && i < 8)
 347   1              {
 348   2                      ret += 1;
 349   2                      if (ret == 3000)
 350   2                      {
 351   3                              ret = 0;
 352   3                              tiptap = 0;
 353   3                      }
 354   2                      P2 = wei[i];
 355   2                      switch (i)
 356   2                      {
 357   3                      case 0:
 358   3                              P0 = duan[t.hour / 10];
 359   3                              break;
 360   3                      case 1:
 361   3                              P0 = duan[t.hour % 10];
 362   3                              break;
 363   3                      case 3:
 364   3                              P0 = duan[t.minute / 10];
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 7   

 365   3                              break;
 366   3                      case 4:
 367   3                              P0 = duan[t.minute % 10];
 368   3                              break;
 369   3                      case 6:
 370   3                              P0 = duan[t.second / 10];
 371   3                              break;
 372   3                      case 7:
 373   3                              P0 = duan[t.second % 10];
 374   3                              break;
 375   3                      default:
 376   3                              P0 = 0x40;
 377   3                              break;
 378   3                      }
 379   2              }
 380   1              else if (light_dig == 0 && i < 3)
 381   1              {
 382   2                      P2 = wei[i];
 383   2                      switch (i)
 384   2                      {
 385   3                      case 0:
 386   3                              P0 = duan[light_bai];
 387   3                              break;
 388   3                      case 1:
 389   3                              P0 = duan[light_shi];
 390   3                              break;
 391   3                      case 2:
 392   3                              P0 = duan[light_ge];
 393   3                              break;
 394   3                      }
 395   2              }
 396   1              Delay20us();
 397   1      }
 398          
 399          void main()
 400          {
 401   1              init();
 402   1              if (DS1302Read(DS1302_second_read) & 0X80)
 403   1                      Init_DS1302();
 404   1              set_charge_DS1302();
 405   1              while (1)
 406   1              {
 407   2                      show_shumaguan();
 408   2      
 409   2                      if (flag_100mS == 1)
 410   2                      {
 411   3                              t = GetDA1302();
 412   3                              flag_100mS = 0;
 413   3                      }
 414   2      
 415   2                      if (sbtKey1 == 0)
 416   2                      {
 417   3                              if (sbtKey1_state == 0)
 418   3                              {
 419   4                                      Delay10ms();
 420   4                                      if (sbtKey1 == 0)
 421   4                                      {
 422   5                                              show_flag = !show_flag;
 423   5                                              sbtKey1_state = 1;
 424   5                                      }
 425   4                              }
 426   3                      }
C51 COMPILER V9.51   DEMO                                                                  09/16/2020 10:52:58 PAGE 8   

 427   2                      else
 428   2                              sbtKey1_state = 0;
 429   2      
 430   2                      if (sbtKey2 == 0)
 431   2                      {
 432   3                              if (sbtKey2_state == 0)
 433   3                              {
 434   4                                      Delay10ms();
 435   4                                      if (sbtKey2 == 0)
 436   4                                      {
 437   5                                              light_dig = !light_dig;
 438   5                                              sbtKey2_state = 1;
 439   5                                      }
 440   4                              }
 441   3                      }
 442   2                      else
 443   2                              sbtKey2_state = 0;
 444   2      
 445   2                      if (show_flag == 0)
 446   2                      {
 447   3                              sbtVib = 1;
 448   3                              if (sbtVib == 0)
 449   3                              {
 450   4                                      tiptap = 1;
 451   4                              }
 452   3                      }
 453   2              }
 454   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1372    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     88       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
